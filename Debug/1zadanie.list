
1zadanie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000140  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000270  08000278  00010278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000270  08000270  00010278  2**0
                  CONTENTS
  4 .ARM          00000000  08000270  08000270  00010278  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000270  08000278  00010278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000270  08000270  00010270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000274  08000274  00010274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000278  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000278  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010278  2**0
                  CONTENTS, READONLY
 12 .debug_line   00000099  00000000  00000000  000102a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00000022  00000000  00000000  0001033a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000012  00000000  00000000  0001035c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000028  00000000  00000000  00010370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0000005b  00000000  00000000  00010398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000020  00000000  00000000  000103f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000258 	.word	0x08000258

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000258 	.word	0x08000258

08000170 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:


	ldr  	r0, =_estack
 8000170:	4837      	ldr	r0, [pc, #220]	; (8000250 <pop_it+0x2>)
	mov  	sp, r0         				 /* set stack pointer */
 8000172:	4685      	mov	sp, r0

	mov 	r2, #3			//Количество элементов массива a
 8000174:	f04f 0203 	mov.w	r2, #3
	mov		r3, #2			//Количество элементов массива b
 8000178:	f04f 0302 	mov.w	r3, #2
	mov		r12, #0 		// Для результата свертки
 800017c:	f04f 0c00 	mov.w	ip, #0
	mov32	r0, 0x20000000	//Указатель массива a
 8000180:	f240 0000 	movw	r0, #0
 8000184:	f2c2 0000 	movt	r0, #8192	; 0x2000
	mov32	r1, 0x20000100	//Указатель массива b
 8000188:	f240 1100 	movw	r1, #256	; 0x100
 800018c:	f2c2 0100 	movt	r1, #8192	; 0x2000
	mov32	r4, 0x20000200  //Указатель результата a*b
 8000190:	f240 2400 	movw	r4, #512	; 0x200
 8000194:	f2c2 0400 	movt	r4, #8192	; 0x2000
	mov32	r6, 0x20000500	//Вторая последовательность
 8000198:	f240 5600 	movw	r6, #1280	; 0x500
 800019c:	f2c2 0600 	movt	r6, #8192	; 0x2000

	@Заполнение массива а
	mov		r5, #2
 80001a0:	f04f 0502 	mov.w	r5, #2
	strb	r5, [r0], #1	//Загрузка значение r5 по памяти r0
 80001a4:	f800 5b01 	strb.w	r5, [r0], #1
	mov		r5, #4
 80001a8:	f04f 0504 	mov.w	r5, #4
	strb	r5, [r0], #1
 80001ac:	f800 5b01 	strb.w	r5, [r0], #1
	mov		r5, #6
 80001b0:	f04f 0506 	mov.w	r5, #6
	strb	r5, [r0], #1
 80001b4:	f800 5b01 	strb.w	r5, [r0], #1
	mov		r5, #0
 80001b8:	f04f 0500 	mov.w	r5, #0
	strb	r5, [r0], #1
 80001bc:	f800 5b01 	strb.w	r5, [r0], #1
	mov32	r0, 0x20000000
 80001c0:	f240 0000 	movw	r0, #0
 80001c4:	f2c2 0000 	movt	r0, #8192	; 0x2000

	@Заполнение второй последовательности
	mov		r5, #0
 80001c8:	f04f 0500 	mov.w	r5, #0
	strb	r5, [r6], #1
 80001cc:	f806 5b01 	strb.w	r5, [r6], #1
	mov		r5, #2
 80001d0:	f04f 0502 	mov.w	r5, #2
	strb	r5, [r6], #1
 80001d4:	f806 5b01 	strb.w	r5, [r6], #1
	mov		r5, #4
 80001d8:	f04f 0504 	mov.w	r5, #4
	strb	r5, [r6], #1
 80001dc:	f806 5b01 	strb.w	r5, [r6], #1
	mov		r5, #6
 80001e0:	f04f 0506 	mov.w	r5, #6
	strb	r5, [r6], #1
 80001e4:	f806 5b01 	strb.w	r5, [r6], #1
	mov32	r6, 0x20000500
 80001e8:	f240 5600 	movw	r6, #1280	; 0x500
 80001ec:	f2c2 0600 	movt	r6, #8192	; 0x2000

	@Заполнение массива b
	mov		r5, #1
 80001f0:	f04f 0501 	mov.w	r5, #1
	strb	r5, [r1], #1
 80001f4:	f801 5b01 	strb.w	r5, [r1], #1
	mov		r5, #2
 80001f8:	f04f 0502 	mov.w	r5, #2
	strb	r5, [r1], #1
 80001fc:	f801 5b01 	strb.w	r5, [r1], #1
	mov32	r1, 0x20000100
 8000200:	f240 1100 	movw	r1, #256	; 0x100
 8000204:	f2c2 0100 	movt	r1, #8192	; 0x2000

	mov		r5, #0
 8000208:	f04f 0500 	mov.w	r5, #0
	add		r5, r2, r3
 800020c:	eb02 0503 	add.w	r5, r2, r3
	sub		r5, #1
 8000210:	f1a5 0501 	sub.w	r5, r5, #1

	mov		r11, #0 //счетчик
 8000214:	f04f 0b00 	mov.w	fp, #0
	push	{r2, r3, r5}
 8000218:	b42c      	push	{r2, r3, r5}

0800021a <sum_loop>:

sum_loop:

	cmp		r5, r11		//Если r5 == r11 перейдем в pop_it
 800021a:	455d      	cmp	r5, fp
	it		eq
 800021c:	bf08      	it	eq
	beq		pop_it
 800021e:	e016      	beq.n	800024e <pop_it>

	@1ый элемент
	ldrSB	r7, [r0], #1
 8000220:	f910 7b01 	ldrsb.w	r7, [r0], #1
	ldrSB	r8, [r1], #1
 8000224:	f911 8b01 	ldrsb.w	r8, [r1], #1
	mla		r12, r7, r8, r12
 8000228:	fb07 cc08 	mla	ip, r7, r8, ip
	@2ой элемент
	ldrSB	r7, [r6], #1
 800022c:	f916 7b01 	ldrsb.w	r7, [r6], #1
	ldrSB	r8, [r1], #1
 8000230:	f911 8b01 	ldrsb.w	r8, [r1], #1
	mla		r12, r7, r8, r12
 8000234:	fb07 cc08 	mla	ip, r7, r8, ip

	mov32	r1, 0x20000100
 8000238:	f240 1100 	movw	r1, #256	; 0x100
 800023c:	f2c2 0100 	movt	r1, #8192	; 0x2000

	strb	r12, [r4], #1
 8000240:	f804 cb01 	strb.w	ip, [r4], #1
	mov		r12, #0
 8000244:	f04f 0c00 	mov.w	ip, #0
	add		r11, #1
 8000248:	f10b 0b01 	add.w	fp, fp, #1

	b sum_loop
 800024c:	e7e5      	b.n	800021a <sum_loop>

0800024e <pop_it>:

pop_it:
	pop {r2, r3, r5}
 800024e:	bc2c      	pop	{r2, r3, r5}
	ldr  	r0, =_estack
 8000250:	20005000 	.word	0x20005000

08000254 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000254:	e7fe      	b.n	8000254 <ADC1_2_IRQHandler>
	...

08000258 <_init>:
 8000258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800025a:	bf00      	nop
 800025c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800025e:	bc08      	pop	{r3}
 8000260:	469e      	mov	lr, r3
 8000262:	4770      	bx	lr

08000264 <_fini>:
 8000264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000266:	bf00      	nop
 8000268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800026a:	bc08      	pop	{r3}
 800026c:	469e      	mov	lr, r3
 800026e:	4770      	bx	lr
